{
    "componentChunkName": "component---src-pages-dev-adding-a-new-tool-md",
    "path": "/dev/adding_a_new_tool/",
    "result": {"pageContext":{"frontmatter":{"title":"Adding a new tool"},"relativePagePath":"/dev/adding_a_new_tool.md","titleType":"page","MdxNode":{"id":"d355579b-8ad8-54bd-ac29-f33bbbddbfeb","children":[],"parent":"4c71f8bc-398d-5154-8292-1cbd9bb30800","internal":{"content":"---\r\ntitle: Adding a new tool\r\n---\r\n\r\n- Add a new tool to the list at `config/tools.json` by copying the existing tool format.\r\n- The new tool MUST end with `-tool`. Various scripts depend on this naming convention.\r\n- Your new tool should be feature flagged off while under development by setting `enabled: false`. You will still be able to run it via a developer shortcut (see below.)\r\n- Create a new package with an `index.js` file containing the following code.\r\n    - The `execute` method will be triggered when the IDE shortcut is invoked.\r\n    - The `overrides` argument is used when the tool is invoked from `main-tool` and also for testing.\r\n    - It is important to use exactly this code so that the correct setup is performed based on whether the tool is invoked from `main-tool` or via a debug shortcut.\r\n\r\n```\r\nconst utils = require(\"../shared-utils/sharedUtils\");\r\n\r\nconst execute = overrides => {\r\n  const config = utils.loadConfig(overrides);\r\n  utils.init(config);\r\n\r\n  console.log(\"Hello, world!\");\r\n}\r\n\r\nmodule.exports = { execute };\r\n```\r\n\r\n- Run `yarn add express nodemon`. These packages will be required later.\r\n- Update the range of ports used. Search VSCode for `4000-40` to see all instances and update them to include your port.\r\n- Run `yarn build:dev` to build the Docker image. This will add a shortcut to Eclipse Theia to run your new tool on its own.\r\n- Update `dev.bat`/`dev.sh` to map the source code from the local machine to the Docker container. This will allow you to edit your code on the fly.\r\n- Run the Docker container using `dev.bat`/`dev.sh`\r\n- Open http://localhost:3000\r\n- Press `ctrl + shift + p` or `F1`.\r\n- Type \"(DEBUG) Run SPM UI Upgrade Helper - &lt;your tool name&gt;\" and you should see your new tool listed.\r\n- Click the tool and you should see the Docker container's log print \"Hello, world!\"\r\n- Implement the tests and code for your tool.\r\n- Add some additional tests to `packages/main-tool` and some additional data to `packages/acceptance-tests/scripts/datasets.json` in the `kitchen-sink` dataset. Just add a few tests. The majority of tests should be in the tool's package.\r\n- When you are ready to release your tool to the customer, set `enabled: true` in `config/tools.json`, which will cause it to be run as part of the main tool. Test this and then release a new version.\r\n\r\n## Notes\r\n\r\n- The first two lines of boilerplate allow the tool to be run independently in dev mode and also as part of the main tool.\r\n- To build and test your tool while keeping it hidden from the customer, `build:dev` generates debug shortcuts to every individual tool, regardless if whether they are enabled or not. You can see these in Eclipse Theia by typing \"(DEBUG) Run SPM UI Upgrade Helper - &lt;your tool name&gt;\".\r\n- `main-tool` is triggered via the \"Run SPM UI Upgrade Helper\" shortcut. It will trigger enabled tools only. This is the only shortcut that customers will see.\r\n- When the Docker container starts, the `code-generation` package uses the data in `config/tools.json` to generate a `server.js` file for each package. It also generates Eclipse Theia plugins as `packages/vs-upgrade-helper-plugin/src/functions.ts`.\r\n- Flagging the feature off during development means you can can continue to commit to `main` every day. Committing to `main` every day means no painful merges, and if your branch breaks something else you will find out sooner rather than later.\r\n","type":"Mdx","contentDigest":"7275365f80ddd2db9fd6dc86bba55203","owner":"gatsby-plugin-mdx","counter":86},"frontmatter":{"title":"Adding a new tool"},"exports":{},"rawBody":"---\r\ntitle: Adding a new tool\r\n---\r\n\r\n- Add a new tool to the list at `config/tools.json` by copying the existing tool format.\r\n- The new tool MUST end with `-tool`. Various scripts depend on this naming convention.\r\n- Your new tool should be feature flagged off while under development by setting `enabled: false`. You will still be able to run it via a developer shortcut (see below.)\r\n- Create a new package with an `index.js` file containing the following code.\r\n    - The `execute` method will be triggered when the IDE shortcut is invoked.\r\n    - The `overrides` argument is used when the tool is invoked from `main-tool` and also for testing.\r\n    - It is important to use exactly this code so that the correct setup is performed based on whether the tool is invoked from `main-tool` or via a debug shortcut.\r\n\r\n```\r\nconst utils = require(\"../shared-utils/sharedUtils\");\r\n\r\nconst execute = overrides => {\r\n  const config = utils.loadConfig(overrides);\r\n  utils.init(config);\r\n\r\n  console.log(\"Hello, world!\");\r\n}\r\n\r\nmodule.exports = { execute };\r\n```\r\n\r\n- Run `yarn add express nodemon`. These packages will be required later.\r\n- Update the range of ports used. Search VSCode for `4000-40` to see all instances and update them to include your port.\r\n- Run `yarn build:dev` to build the Docker image. This will add a shortcut to Eclipse Theia to run your new tool on its own.\r\n- Update `dev.bat`/`dev.sh` to map the source code from the local machine to the Docker container. This will allow you to edit your code on the fly.\r\n- Run the Docker container using `dev.bat`/`dev.sh`\r\n- Open http://localhost:3000\r\n- Press `ctrl + shift + p` or `F1`.\r\n- Type \"(DEBUG) Run SPM UI Upgrade Helper - &lt;your tool name&gt;\" and you should see your new tool listed.\r\n- Click the tool and you should see the Docker container's log print \"Hello, world!\"\r\n- Implement the tests and code for your tool.\r\n- Add some additional tests to `packages/main-tool` and some additional data to `packages/acceptance-tests/scripts/datasets.json` in the `kitchen-sink` dataset. Just add a few tests. The majority of tests should be in the tool's package.\r\n- When you are ready to release your tool to the customer, set `enabled: true` in `config/tools.json`, which will cause it to be run as part of the main tool. Test this and then release a new version.\r\n\r\n## Notes\r\n\r\n- The first two lines of boilerplate allow the tool to be run independently in dev mode and also as part of the main tool.\r\n- To build and test your tool while keeping it hidden from the customer, `build:dev` generates debug shortcuts to every individual tool, regardless if whether they are enabled or not. You can see these in Eclipse Theia by typing \"(DEBUG) Run SPM UI Upgrade Helper - &lt;your tool name&gt;\".\r\n- `main-tool` is triggered via the \"Run SPM UI Upgrade Helper\" shortcut. It will trigger enabled tools only. This is the only shortcut that customers will see.\r\n- When the Docker container starts, the `code-generation` package uses the data in `config/tools.json` to generate a `server.js` file for each package. It also generates Eclipse Theia plugins as `packages/vs-upgrade-helper-plugin/src/functions.ts`.\r\n- Flagging the feature off during development means you can can continue to commit to `main` every day. Committing to `main` every day means no painful merges, and if your branch breaks something else you will find out sooner rather than later.\r\n","fileAbsolutePath":"/home/runner/work/spm-ui-upgrade-helper/spm-ui-upgrade-helper/packages/gatsby-docs/src/pages/dev/adding_a_new_tool.md"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}